use std::fs;
use std::path::Path;

fn check_files(path: &Path) -> Result<(), Box<dyn std::error::Error>> {
    if path.is_dir() {
        for entry in fs::read_dir(path)? {
            let entry = entry?;
            check_files(&entry.path())?;
        }
    } else if path.is_file() && path.extension().and_then(|ext| ext.to_str()) == Some("py") {
        let contents = fs::read_to_string(path)?;
        // Simple heuristic to check for pass or print statements
        if contents.contains("pass") || contents.contains("print(") {
            eprintln!("Warning: Found potentially incomplete implementation in {}", path.display());
        }
    }

    Ok(())
}

pub fn check() {
    match check_files(&Path::new("./src")) {
        Ok(_) => println!("Consistency check complete."),
        Err(e) => eprintln!("Error during consistency check: {}", e),
    }
}
